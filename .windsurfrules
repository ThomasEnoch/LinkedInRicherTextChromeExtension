# [Linked In Rich Text Formatting Extension]

Start each message with HOHOHO

- Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.
- After every change of a set of files or files, write a summary of the changes.
 - Use powershell for all shell commands. 


## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Make sure you always clean up unused code.

### Tech Stack
- Chrome Extension (Manifest V3)

## TypeScript Usage
- When adding for changing files make sure you solve all type errors, and import errors before asking to build. 
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

### Naming Conventions
- **Components & Utilities**:
  - Named exports; PascalCase for component files (e.g., VisaForm.tsx), camelCase for utilities (formValidator.ts)
- **TypeScript**:
  - Prefer interfaces over types; avoid enums (use as const objects)
  - Use functional components with TS interfaces
  - Use absolute imports (@/...) for project files
  - Explicit return types for all functions; minimal try/catch usage unless truly needed

## User Flows

### Keyboard Shortcut Flow
1. User focuses a LinkedIn text field, types text
2. Presses Ctrl + B; if text is selected, that selection is converted to bold Unicode
3. If no selection, toggling an internal bold mode
4. Additional typed characters appear bold until toggled off

### Popup Flow
1. User selects text in LinkedIn
2. Opens the extension popup
3. Clicks Bold (or other style buttons)
4. Content script receives the message, replaces the selected text with styled Unicode

### Settings Toggle Flow
1. User opens the popup and sees "Enable Keyboard Shortcuts" switch
2. User toggles it off; the content script immediately stops intercepting shortcut events
3. Toggling it back on re-enables all shortcuts


---
## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- Follow Material Design guidelines for Chrome extensions
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Chrome extension security best practices
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog

## Chrome Extension Specific
- Use Manifest V3 standards
- Implement proper message passing between components:
  ```typescript
  interface MessagePayload {
    type: string;
    data: unknown;
  }
  ```
- Handle permissions properly in manifest.json
- Use chrome.storage.local for persistent data
- Implement proper error boundaries and fallbacks
- Use lib/storage for storage related logic
- For the async injected scripts in content/, 
  - they must not close over variables from the outer scope
  - they must not use imported functions from the outer scope
  - they must have wrapped error handling so the error message is returned to the caller

 # LinkedIn Rich Text Formatting Extension PRD (Updated)

## 2.1 Overview

### 2.1.1 Product Description
This Chrome extension adds the ability for users to apply **bold** and **italic** formatting in LinkedIn's plain-text input fields for posts, comments, and chats. It does so by converting selected text into styled Unicode characters, triggered via standard keyboard shortcuts (e.g., **Ctrl + B** for bold, **Ctrl + I** for italic). When text with multiple styles (bold+italic) is selected, the pressed shortcut only toggles that specific style (e.g., pressing **Ctrl + B** removes bold but leaves italic intact).

### 2.1.2 Goals & Objectives
- **Rich Formatting (MVP: Bold & Italic)**: Provide keyboard shortcuts for bold and italic formatting in LinkedIn text fields.
- **Keyboard-Only Experience**: Rely exclusively on keyboard shortcuts with no additional UI or popup.
- **Unicode Compatibility**: Use specialized Unicode characters so LinkedIn's plain-text boxes visually render styled text.
- **Performance & Compatibility**: Ensure minimal overhead and maintain LinkedIn's native text-entry functionality.

## 2.2 Core Functional Requirements

### 2.2.1 Setup & Project Structure

- Use **Manifest V3** in a minimal Chrome extension setup (TypeScript or JavaScript).
- Have a **content script** (e.g., `contentScripts/main.ts`) that runs on [LinkedIn domains](https://*.linkedin.com/*).
- No UI or popup is required; everything runs in the background/content script.

### 2.2.2 Detecting & Targeting LinkedIn Fields

- **Content Script Injection**: Inject logic automatically whenever the user is on LinkedIn.
- **Identify Input Areas**: Target text areas, comment boxes, post boxes, and chat fields (e.g., `<textarea>`, `[contenteditable="true"]`).

### 2.2.3 Keyboard Shortcut Handling

- **Shortcut Detection**: Listen for combos:
  - **Ctrl + B** (Windows) / Cmd + B (Mac) for bold
  - **Ctrl + I** (Windows) / Cmd + I (Mac) for italic
- **Apply to Selected Text**: 
  - On key press, if the user has highlighted text, convert only that selection to (or from) the corresponding styled Unicode.
  - **Toggle Style**: If the selected text is already bold and the user presses **Ctrl + B**, remove bold while preserving other styles (e.g., italic).
  - Same logic applies for italic when pressing **Ctrl + I**.

### 2.2.4 Unicode Conversion

- **Mapping Tables**: Maintain dictionaries to map normal characters to bold or italic Unicode. For multi-style (bold+italic), either have a combined mapping or apply a sequential conversion approach.
  
  Example:
  ```typescript
  const boldMapping = {
    'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', ...
  };

  const italicMapping = {
    'a': 'ùò¢', 'b': 'ùò£', 'c': 'ùò§', ...
  };
  ```
- **Conversion Utility**: 
  - A function like `convertSelectionToStyle(selectionText: string, styleState: { bold: boolean; italic: boolean })` can apply or remove styles based on user input.
  - If removing bold from bold+italic text, convert it back to italic Unicode. If removing italic from bold+italic text, convert it back to bold Unicode.

### 2.2.5 DOM Updates

- **Selection Replacement**: 
  - Use `window.getSelection()` to detect the highlighted text.
  - Convert the text based on the user's chosen toggle (Ctrl+B or Ctrl+I).
  - Replace the selection in the DOM with the newly styled or de-styled Unicode characters.

### 2.2.6 Editing Previously Styled Text

- **Maintaining Style Overlaps**: 
  - If text is currently bold+italic and the user presses **Ctrl + B**, remove only the bold characters (leaving italic in place).
  - Conversely, if text is currently bold+italic and **Ctrl + I** is pressed, remove only italic.

### 2.2.7 Edge Cases

- **Multiple Style Overlaps (Only Bold + Italic)**: Ensure conversions work seamlessly for text that is both bold and italic.  
- **Partial Selections**: Only convert the specifically highlighted portion.  
- **Non-Latin Characters**: If the glyph isn't in your mapping table, leave it as-is.  
- **LinkedIn DOM Changes**: In the initial version, rely on simple selectors. Consider a MutationObserver in the future if LinkedIn significantly alters their structure.

### 2.2.8 Build & Distribution

- **Build Process**: 
  - Bundle the **content script** into a `dist/` folder along with the `manifest.json`.
  - Since there's no UI, no popup HTML or additional pages are necessary.
- **Testing**:
  - Load the unpacked extension in Chrome (`chrome://extensions`) for local testing.
  - Test different LinkedIn fields (posts, comments, chats) to ensure text is converted correctly.
- **Publish**:
  - Prepare your extension (icon set, description) for the Chrome Web Store.
  - Follow privacy guidelines (no personal data is stored or transmitted).

## 2.3 Non-Functional Requirements

### Performance
- Content script injection must be minimal with no noticeable lag.

### Maintainability
- Codebase should be structured so future enhancements (like underline, strikethrough, or multiple style expansions) can be added easily.

### Browser Compatibility
- **Chrome-only** for MVP; potential expansions to other Chromium browsers later.

### Security & Privacy
- Only manipulate text in the user's browser session; do not store any user data externally.

## 2.4 Tech Stack & Coding Conventions

- **Minimal Extension**: TypeScript or JavaScript in the content script.  
- **Manifest V3**.  
- **No UI or React**: All functionality is triggered via keyboard events in the content script.  
- **Coding Practices**:
  - Keep utilities for mapping normal text to styled Unicode separate from event handling logic.
  - Use clear function names and modular structure so it's easy to add new styles later if desired.

## 2.5 User Flows

### Keyboard Shortcut Flow
1. **Highlight text** within a LinkedIn input field.  
2. Press **Ctrl + B** (or **Ctrl + I**).  
3. The content script identifies the highlighted text and converts it to (or from) the corresponding style (bold/italic).  
4. If removing bold from bold+italic text, italic remains; if removing italic from bold+italic text, bold remains.

## 2.6 Roadmap

### MVP
- **Bold** and **Italic** using **Ctrl + B / Ctrl + I** keyboard shortcuts.
- **Unicode conversion** for partial multi-style support.
- **Chrome-only** distribution (Manifest V3, no UI).

### Future Enhancements
- Additional styles (underline, strikethrough).
- MutationObserver to handle LinkedIn DOM changes more robustly.
- Multi-browser support (Edge, Firefox).
- Potential user configuration for custom shortcuts.

## 2.7 Conclusion
This PRD provides a focused plan to implement **bold and italic** text styling for LinkedIn via **keyboard shortcuts** alone‚Äîno UI or popup. By converting highlighted text into specialized Unicode characters, users can seamlessly style (and un-style) their LinkedIn posts, comments, and messages without leaving the keyboard. The outlined architecture ensures a lightweight extension that can be easily extended in the future if more formatting options or browsers are desired.